
import java.io.File;
import java.io.FileNotFoundException;
import java.io.PrintWriter;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.Random;
import java.util.Scanner;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author xavier2696
 */
public class Main extends javax.swing.JFrame {

    /**
     * Creates new form Main
     */
    public Main() {
               
        
        initComponents();
        buton_generar.setEnabled(false);
        sp_aulas.setEnabled(false);
        jTabbedPane1.setEnabled(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        list_alumnos = new javax.swing.JList();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        list_clases = new javax.swing.JList();
        jPanel4 = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        list_maestros = new javax.swing.JList();
        jPanel5 = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        jScrollPane4 = new javax.swing.JScrollPane();
        table_maestros = new javax.swing.JTable();
        jScrollPane5 = new javax.swing.JScrollPane();
        table_aulas = new javax.swing.JTable();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jScrollPane6 = new javax.swing.JScrollPane();
        list_noabiertas = new javax.swing.JList();
        jLabel6 = new javax.swing.JLabel();
        buton_generar = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        sp_aulas = new javax.swing.JSpinner();
        jMenuBar1 = new javax.swing.JMenuBar();
        menu1 = new javax.swing.JMenu();
        menuitem1 = new javax.swing.JMenuItem();
        jMenuItem5 = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jTabbedPane1.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jTabbedPane1StateChanged(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Tahoma", 0, 36)); // NOI18N
        jLabel2.setText("Bienvenido");

        jLabel3.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        jLabel3.setText("Genere los datos aleatoriamente en el menu de archivo para empezar");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(443, 443, 443)
                .addComponent(jLabel2)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(176, Short.MAX_VALUE)
                .addComponent(jLabel3)
                .addGap(134, 134, 134))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(100, 100, 100)
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(80, 80, 80)
                .addComponent(jLabel3)
                .addContainerGap(183, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Inicio", jPanel1);

        jPanel2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jPanel2MouseClicked(evt);
            }
        });

        list_alumnos.setModel(new DefaultListModel());
        jScrollPane2.setViewportView(list_alumnos);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 1038, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 427, Short.MAX_VALUE)
                .addContainerGap())
        );

        jTabbedPane1.addTab("Alumnos", jPanel2);

        jPanel3.addContainerListener(new java.awt.event.ContainerAdapter() {
            public void componentAdded(java.awt.event.ContainerEvent evt) {
                jPanel3ComponentAdded(evt);
            }
        });

        list_clases.setModel(new DefaultListModel());
        jScrollPane1.setViewportView(list_clases);

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 1038, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 427, Short.MAX_VALUE)
                .addContainerGap())
        );

        jTabbedPane1.addTab("Clases", jPanel3);

        list_maestros.setModel(new DefaultListModel());
        jScrollPane3.setViewportView(list_maestros);

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 1038, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 427, Short.MAX_VALUE)
                .addContainerGap())
        );

        jTabbedPane1.addTab("Maestros", jPanel4);

        jPanel5.setEnabled(false);

        jButton1.setText("Guardar en Archivo");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        table_maestros.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        jScrollPane4.setViewportView(table_maestros);

        table_aulas.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        jScrollPane5.setViewportView(table_aulas);

        jLabel4.setText("Horario Maestros");

        jLabel5.setText("Horario Aulas");

        list_noabiertas.setModel(new DefaultListModel());
        jScrollPane6.setViewportView(list_noabiertas);

        jLabel6.setText("Clases que no se pudieron abrir");

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane4)
                            .addGroup(jPanel5Layout.createSequentialGroup()
                                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel5)
                                    .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 870, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                                    .addComponent(jLabel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))))
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel5Layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(jLabel4))
                            .addGroup(jPanel5Layout.createSequentialGroup()
                                .addGap(441, 441, 441)
                                .addComponent(jButton1)))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel5Layout.createSequentialGroup()
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 9, Short.MAX_VALUE)
                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 173, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(jLabel6))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane6, javax.swing.GroupLayout.DEFAULT_SIZE, 182, Short.MAX_VALUE)
                    .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButton1)
                .addContainerGap())
        );

        jTabbedPane1.addTab("Horario", jPanel5);

        buton_generar.setText("Generar Horario");
        buton_generar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buton_generarActionPerformed(evt);
            }
        });

        jLabel1.setText("Numero de Aulas");

        sp_aulas.setModel(new javax.swing.SpinnerNumberModel(Integer.valueOf(1), Integer.valueOf(1), null, Integer.valueOf(1)));

        menu1.setText("Archivo");

        menuitem1.setText("Generar Datos Aleatoriamente");
        menuitem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuitem1ActionPerformed(evt);
            }
        });
        menu1.add(menuitem1);

        jMenuItem5.setText("Salir");
        jMenuItem5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem5ActionPerformed(evt);
            }
        });
        menu1.add(jMenuItem5);

        jMenuBar1.add(menu1);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1)
            .addGroup(layout.createSequentialGroup()
                .addGap(367, 367, 367)
                .addComponent(jLabel1)
                .addGap(138, 138, 138)
                .addComponent(sp_aulas, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(buton_generar)
                .addGap(447, 447, 447))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jTabbedPane1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(sp_aulas, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addGap(18, 18, 18)
                .addComponent(buton_generar)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void buton_generarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buton_generarActionPerformed
        // TODO add your handling code here:
         //datos de prueba
        
        //ordenar clases por prioridad
        for (Clase clase : clases) {
            int cant = 0;
            for (Maestro maestro: maestros) {
                for (Clase clase_temp : maestro.getClases_posibles()) {
                    if (clase_temp.getNombre().equals(clase.getNombre())) {
                        cant++;
                    }
                }
            }
            clase.setCant_maestros(cant);
            /*int cant = 0;
            for (Alumno alumno: alumnos) {
                for (Clase clase_temp : alumno.getClases()) {
                    if (clase_temp.getNombre().equals(clase.getNombre())) {
                        cant++;
                    }
                }
            }
            clase.setCant_alumnos(cant);*/
        }
        Collections.sort(clases, new Comparator<Clase>(){
            @Override
            public int compare(Clase o1, Clase o2){
                 if(o1.getCant_maestros() < o2.getCant_maestros()){
                    return -1; 
                 }
                 if(o1.getCant_maestros() > o2.getCant_maestros()){
                    return 1; 
                 }
                 return 0;
            }
         });
       
        
        //llenar arreglo de proximidad por cada clase
        for(int i = 0; i<clases.size(); i++){
            clases.get(i).setPosicion(i);
            clases.get(i).setProximidad(clases.size());            
        }
        for(Alumno alumno:alumnos){
            for(int j = 0; j<alumno.getClases().size(); j++){
                for(int k = j+1; k<alumno.getClases().size(); k++)
                    alumno.getClase(j).addProximidad(alumno.getClase(k));
            }
                    
        }
        
        //matriz de horas de maestros
        Clase horas_maestros[][] = new Clase[9][maestros.size()];
        int column = 0;
        for(Maestro maestro:maestros){
            for(Integer integer:maestro.getHoras_posibles()){
                horas_maestros[integer][column] = new Clase("disponible");
            }
            column++;
        }
        //matriz de aulas disponibles
        Clase horas_aulas[][] = new Clase[9][(Integer)sp_aulas.getValue()];
        for(int i = 0; i<horas_aulas.length; i++)
            for(int j=0;j<horas_aulas[i].length; j++)
                horas_aulas[i][j] = new Clase("disponible");
        
        //asignar clases a maestros
        DefaultListModel listmodel = (DefaultListModel)list_noabiertas.getModel();
        listmodel.removeAllElements();
        for(Clase clase:clases){
            int row;
            int col;
            boolean ciclo = true;
            boolean agregado = false;
            int pos_masproximo;
            int acumulador = 0;
            do{                
                //buscar el indice de la clase mas proxima
                pos_masproximo = 0;
                int valor_masproximo = clase.getProximidadClases()[0];
                for(int i=1;i<clase.getProximidadClases().length; i++){
                    if(clase.getProximidadClases()[i]>clase.getProximidadClases()[pos_masproximo]){
                        //System.out.println("entra proximo");
                        pos_masproximo=i;
                        valor_masproximo = clase.getProximidadClases()[i];
                        
                        //break;
                    }
                }
                //System.out.println("proximo: "+pos_masproximo);
                clase.getProximidadClases()[pos_masproximo] = -1;
                //buscar ubicacion de clase mas proxima en matriz de clases si esta existe en la matriz
                row = -1;
                col = -1;
                //System.out.println("pos: "+pos_masproximo);
                for(int i=0;i<horas_maestros.length; i++){
                    for(int j =0;j<horas_maestros[i].length; j++){
                        if( horas_maestros[i][j] != null && horas_maestros[i][j].getNombre().equals(clases.get(pos_masproximo).getNombre())){
                            //System.out.println("entra igual "+valor_masproximo);
                            if(valor_masproximo>0){
                                row = i;
                                col = j;
                            }
                        }
                    }
                }
                //si la clase mas proxima ya fue agregada y se conoce su ubicacion intentar agregar la clase seguida
                if(row!=-1 && col!=-1){
                    int row1 = row-1;
                    int row2 = row+1;
                    int row3 = row-2;
                    int row4 = row+2;
                    //System.out.println("row1: "+row1+" row2: "+row2);
                    //ver si hay aula vacia en horario que se busca
                    int aulacol1 = -1;
                    int aulacol2 = -1;
                    int aulacol3 = -1;
                    int aulacol4 = -1;
                    for(int i=0;i<horas_aulas[0].length; i++){
                        if(row1>=0 && horas_aulas[row1][i].getNombre().equals("disponible"))
                            aulacol1 = i;
                        if(row2<=8 && horas_aulas[row2][i].getNombre().equals("disponible"))
                            aulacol2 = i;
                        if(row3>=0 && horas_aulas[row3][i].getNombre().equals("disponible"))
                            aulacol3 = i;
                        if(row4<=8 && horas_aulas[row4][i].getNombre().equals("disponible"))
                            aulacol4 = i;
                    }
                    for(int i =0; i<maestros.size(); i++){
                        boolean salir = false;                        
                        if(row1 >= 0 && horas_maestros[row1][i] != null && horas_maestros[row1][i].getNombre().equals("disponible") && aulacol1 != -1){
                            for(Maestro maestro:clase.getMaestros()){
                                if(maestro.getNombre().equals(maestros.get(i).getNombre())){
                                    horas_maestros[row1][i] = clase; 
                                    horas_aulas[row1][aulacol1] = clase;
                                    clase.setMaestro_asignado(maestro);
                                    clase.setAula_asignada(aulacol1);
                                    clase.setHora_asignada(row1);
                                    //System.out.println("Agrega row1 "+clase.getNombre());
                                    for(Clase clase2:clases){
                                        clase2.subtractProximidad(pos_masproximo);
                                    }
                                    
                                    //System.out.println("");
                                    salir = true;
                                    break;
                                }
                            }
                        }                        
                        if(!salir && row2<=8 && horas_maestros[row2][i] != null && horas_maestros[row2][i].getNombre().equals("disponible") && aulacol2 != -1){
                            for(Maestro maestro:clase.getMaestros()){
                                if(maestro.getNombre().equals(maestros.get(i).getNombre())){
                                    horas_maestros[row2][i] = clase; 
                                    horas_aulas[row2][aulacol2] = clase;
                                    clase.setMaestro_asignado(maestro);
                                    clase.setAula_asignada(aulacol2);
                                    clase.setHora_asignada(row2);
                                    //System.out.println("Agrega row2 "+clase.getNombre());
                                    for(Clase clase2:clases){
                                        clase2.subtractProximidad(pos_masproximo);
                                    }
                                    //System.out.println("");
                                    salir = true;
                                    break;
                                }
                            }
                        }
                        if(!salir && row3>=0 && horas_maestros[row3][i] != null && horas_maestros[row3][i].getNombre().equals("disponible") && aulacol3 != -1){
                            for(Maestro maestro:clase.getMaestros()){
                                if(maestro.getNombre().equals(maestros.get(i).getNombre())){
                                    horas_maestros[row3][i] = clase; 
                                    horas_aulas[row3][aulacol3] = clase;
                                    clase.setMaestro_asignado(maestro);
                                    clase.setAula_asignada(aulacol3);
                                    clase.setHora_asignada(row3);
                                    //System.out.println("Agrega row3 "+clase.getNombre());
                                    for(Clase clase2:clases){
                                        clase2.subtractProximidad(pos_masproximo);
                                    }
                                    //System.out.println("");
                                    salir = true;
                                    break;
                                }
                            }
                        }
                        if(!salir && row4<=8 && horas_maestros[row4][i] != null && horas_maestros[row4][i].getNombre().equals("disponible") && aulacol4 != -1){
                            for(Maestro maestro:clase.getMaestros()){
                                if(maestro.getNombre().equals(maestros.get(i).getNombre())){
                                    horas_maestros[row4][i] = clase; 
                                    horas_aulas[row4][aulacol4] = clase;
                                    clase.setMaestro_asignado(maestro);
                                    clase.setAula_asignada(aulacol4);
                                    clase.setHora_asignada(row4);
                                    //System.out.println("Agrega row4 "+clase.getNombre());
                                    for(Clase clase2:clases){
                                        clase2.subtractProximidad(pos_masproximo);
                                    }
                                    //System.out.println("");
                                    salir = true;
                                    break;
                                }
                            }
                        }
                        if(salir){
                            agregado = true;
                            ciclo = false;
                            break;
                        }
                    }
                    
                }
                acumulador++;
                //si ya se exploraron todas las posibiidades y no hay mas proximo tambien salirse del ciclo
                if(acumulador == clase.getProximidadClases().length-1)
                    ciclo = false;
            }while(ciclo);
            //si la clase no se pudo agregar en ninguna posicion seguida a otra clase proxima
            //agregarla en primer espacio vacio que encuentre
            if(!agregado){
                boolean agregado2 = false;
                for(int i = 0; i<clase.getMaestros().size(); i++){
                    boolean salir = false;
                    for(int j = 0; j<clase.getMaestros().get(i).getHoras_posibles().size(); j++){
                        int hora = clase.getMaestros().get(i).getHoras_posibles().get(j);
                        int pos_maestro = clase.getMaestros().get(i).getPosicion();
                        int aula = -1;
                        for(int k = 0; k<horas_aulas[hora].length; k++){
                            if(horas_aulas[hora][k].getNombre().equals("disponible")){
                                aula = k;
                            }
                        }
                        if(horas_maestros[hora][pos_maestro].getNombre().equals("disponible") && aula!=-1){
                            horas_maestros[hora][pos_maestro] = clase;
                            horas_aulas[hora][aula] = clase;
                            clase.setMaestro_asignado(clase.getMaestros().get(i));
                            clase.setAula_asignada(aula);
                            clase.setHora_asignada(hora);
                            //System.out.println("Agrega final: "+clase.getNombre());
                            agregado2 = true;
                            salir = true;
                            break;
                        }
                    }
                    if(salir)
                        break;
                }
                /*boolean agregado2 = false;
                for(int i = 0; i<horas_maestros[0].length; i++){
                    boolean salir2 = false;
                    for(int j = 0; j<horas_maestros.length; j++){
                        boolean salir = false;
                        if(horas_maestros[j][i].getNombre().equals("disponible")){
                            for(Maestro maestro:clase.getMaestros()){
                                if(maestro.getNombre().equals(maestros.get(i).getNombre())){
                                    horas_maestros[j][i] = clase; 
                                    //System.out.println("Agrega final "+clase.getNombre());
                                    //System.out.println("");
                                    agregado2 = true;
                                    salir = true;
                                    break;
                                }
                            }
                        }
                        if(salir){
                            salir2 = true;
                            break;
                        }
                    }
                    if(salir2)
                        break;
                }*/
                if(!agregado2){
                    listmodel.addElement(clase.getNombre());
                    clases_noabiertas.add(clase);
                }
                    //System.out.println("No se pudo encontrar hora para la clase: "+clase.getNombre());
            }    
            //for(Clase clase2:clases)
            //                            clase2.printProximidad();
        }
        DefaultTableModel tablemodel = new DefaultTableModel();        
        //tablemodel.addColumn();
        tablemodel.addColumn("Horas");
        for(Maestro maestro:maestros)
            tablemodel.addColumn(maestro.getNombre());
        for(int i =0;i<horas_maestros.length; i++){
            Object row[] = new Object[horas_maestros[i].length+1];
            switch(i){
                case 0:
                    row[0] = "7:00-8:30";
                    break;
                case 1:
                    row[0]="8:30-10:00";
                    break;
                case 2:
                    row[0]="10:00-11:30 ";
                    break;
                case 3:
                    row[0]="11:30-1:00 ";
                    break;
                case 4:
                    row[0]="1:00-2:20 ";
                    break;
                case 5:
                    row[0]="2:20-3:40 ";
                    break;
                case 6:
                    row[0]="3:40-5:00 ";
                    break;
                case 7:
                    row[0]="5:10-6:30 ";
                case 8:
                    row[0]="6:30-8:00 ";
                default:
            }
            
            for(int j = 0;j<horas_maestros[i].length; j++){
                if(horas_maestros[i][j] != null)
                    row[j+1] = horas_maestros[i][j].getNombre();
                else
                    row[j+1] = "vacio";
            }
            tablemodel.addRow(row);
        }
        
        DefaultTableModel tablemodel2 = new DefaultTableModel();
        tablemodel2.addColumn("Horas");
        for(int i =0;i<horas_aulas[0].length; i++){
            tablemodel2.addColumn("Aula "+(i+1));
        }
        for(int i =0;i<horas_aulas.length;i++){
            Object row[] = new Object[horas_aulas[i].length+1];
            switch(i){
                case 0:
                    row[0] = "7:00-8:30";
                    break;
                case 1:
                    row[0]="8:30-10:00";
                    break;
                case 2:
                    row[0]="10:00-11:30 ";
                    break;
                case 3:
                    row[0]="11:30-1:00 ";
                    break;
                case 4:
                    row[0]="1:00-2:20 ";
                    break;
                case 5:
                    row[0]="2:20-3:40 ";
                    break;
                case 6:
                    row[0]="3:40-5:00 ";
                    break;
                case 7:
                    row[0]="5:10-6:30 ";
                case 8:
                    row[0]="6:30-8:00 ";
                default:
            }
            
            for(int j = 0;j<horas_aulas[i].length; j++){
                if(horas_aulas[i][j].getNombre().equals("disponible"))
                    row[j+1] = "vacio";
                else
                    row[j+1] = horas_aulas[i][j].getNombre();                    
            }
            tablemodel2.addRow(row);
        }
        table_aulas.setModel(tablemodel2);
        table_maestros.setModel(tablemodel);
        jTabbedPane1.setEnabledAt(4, true);
        jTabbedPane1.setSelectedIndex(4);
        buton_generar.setEnabled(false);
        //menuitem1.setEnabled(false);
        
        //imprimir horario
        /*System.out.println("Maestros");
        for(int i = 0; i<horas_maestros.length;i++){
            for(int j =0; j<horas_maestros[i].length; j++){
                if(horas_maestros[i][j] != null)
                    System.out.printf("[%20s]",horas_maestros[i][j].getNombre());
                else
                    System.out.printf("[%20s]","vacia");
            }
            System.out.println("");
        }
        System.out.println("");
        System.out.println("Aulas");
        for(int i = 0; i<horas_aulas.length;i++){
            for(int j =0; j<horas_aulas[i].length; j++){
                System.out.printf("[%20s]",horas_aulas[i][j].getNombre());
            }
            System.out.println("");
        }*/
        
    }//GEN-LAST:event_buton_generarActionPerformed

    private void jPanel3ComponentAdded(java.awt.event.ContainerEvent evt) {//GEN-FIRST:event_jPanel3ComponentAdded
        // TODO add your handling code here:
    }//GEN-LAST:event_jPanel3ComponentAdded

    private void jPanel2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPanel2MouseClicked
        // TODO add your handling code here:
        
    }//GEN-LAST:event_jPanel2MouseClicked

    private void jTabbedPane1StateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jTabbedPane1StateChanged
        // TODO add your handling code here:
        if(jTabbedPane1.getSelectedIndex() == 1 || jTabbedPane1.getSelectedIndex() == 2 || jTabbedPane1.getSelectedIndex() == 3)
            showData();
    }//GEN-LAST:event_jTabbedPane1StateChanged

    private void menuitem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuitem1ActionPerformed
        // TODO add your handling code here:
        clases = new ArrayList();
        maestros = new ArrayList();
        alumnos = new ArrayList();
        clases_noabiertas = new ArrayList();
        Scanner s;
        Random r = new Random();
        try {
            s = new Scanner(new File("clases.txt"));
            while(s.hasNextLine())
                clases.add(new Clase(s.nextLine()));
            
            s = new Scanner(new File("maestros.txt"));
            while(s.hasNextLine()){
                ArrayList<Integer> temp = new ArrayList<Integer>();
                for(int i=0;i<8; i++){
                    int decision = r.nextInt(2);
                    if(decision == 1)
                        temp.add(i);
                }
                ArrayList<Clase> temp2 = new ArrayList<Clase>();
                for(Clase clase:clases){
                    int decision = r.nextInt(4);
                    if(decision == 1)
                        temp2.add(clase);
                }
                maestros.add(new Maestro(s.nextLine(),temp2,temp));
            }
            int temp = 0;
            for(Maestro maestro:maestros){
                maestro.setPosicion(temp);
                for(Clase clase:maestro.getClases_posibles()){
                    clase.addMaestro(maestro);
                    //clase.addMaestro(new Maestro(maestro.getNombre(),maestro.getClases_posibles(),maestro.getHoras_posibles()));
                }
                temp++;
            }
            s = new Scanner(new File("alumnos.txt"));
            while(s.hasNextLine()){                
                ArrayList<Clase> temp2 = new ArrayList<Clase>();
                for(Clase clase:clases){
                    int decision = r.nextInt(5);
                    if(decision == 1 && temp2.size()<5)
                        temp2.add(clase);
                }
                alumnos.add(new Alumno(s.nextLine(),temp2));
            }
            
            sp_aulas.setEnabled(true);
            jTabbedPane1.setEnabled(true);
            jTabbedPane1.setEnabledAt(4, false);
            buton_generar.setEnabled(true);
        } catch (FileNotFoundException ex) {
            Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        
    }//GEN-LAST:event_menuitem1ActionPerformed

    private void jMenuItem5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem5ActionPerformed
        // TODO add your handling code here:
        System.exit(0);
    }//GEN-LAST:event_jMenuItem5ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        //ordenados de alumno con menos clases a alumno con mas clases
        Collections.sort(alumnos, new Comparator<Alumno>(){
            @Override
            public int compare(Alumno o1, Alumno o2){
                 if(o1.getClases().size()< o2.getClases().size()){
                    return -1; 
                 }
                 if(o1.getClases().size() > o2.getClases().size()){
                    return 1; 
                 }
                 return 0;
            }
         });
        for(Alumno alumno:alumnos){
            for(Clase clase:alumno.getClases()){
                if(clase.getHora_asignada() == -1){
                    alumno.subtractSatisfaccion();
                }else{
                    if(clase.getAlumnos().size() <39){
                        clase.addAlumno(alumno);
                        alumno.addClase_matriculada(clase);
                    }else{
                        //System.out.println(alumno.getNombre()+" se queda sin cupo");
                    }
                }
            }
            double valor_clases_seguidas = 0;
            for(Clase clase:alumno.getClases_matriculadas()){
                boolean separada = true;
                for(Clase clase2:alumno.getClases_matriculadas()){
                    if(clase2.getNombre().equals(clase.getNombre()))
                        continue;
                    int hora1 = clase.getHora_asignada();
                    int hora2 = clase2.getHora_asignada();
                    if(Math.abs(hora1-hora2)<2){
                        separada  = false;
                    }
                    //if(Math.abs(hora1-hora2)>4)
                        //valor_clases_seguidas+=0.5;
                }
                if(separada)
                    valor_clases_seguidas+=0.5;
            }
            alumno.setSatisfaccion(alumno.getSatisfaccion()-valor_clases_seguidas);
        }
        try{
            PrintWriter writer = new PrintWriter("resultados.txt", "UTF-8");
            writer.println("Horario Clases");
            for(Clase clase:clases){
                if(clase.getMaestro_asignado() != null){
                    writer.println("Nombre clase: "+clase.getNombre()+" Maestro:"+clase.getMaestro_asignado().getNombre()+
                            " Aula:"+(clase.getAula_asignada()+1)+" Hora: "+convertirHora(clase.getHora_asignada()));
                    writer.println("Alumnos");
                }                
                for(Alumno alumno:clase.getAlumnos()){
                    writer.print(alumno.getNombre()+",");
                }
                writer.println();
            }
            writer.println("Satisfaccion por Alumno");
            for(Alumno alumno:alumnos){
                writer.println("Nombre: "+alumno.getNombre()+" Satisfaccion: "+alumno.getSatisfaccion());
            }
            writer.close();
            JOptionPane.showMessageDialog(this, "Se ha creado el archivo resultados.txt con exito");
        }catch(Exception e){
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    public String convertirHora(int hora){
        String toString = "";
        switch(hora){
                case 0:
                    toString+=" 7:00-8:30";
                    break;
                case 1:
                    toString+=" 8:30-10:00";
                    break;
                case 2:
                    toString+=" 10:00-11:30";
                    break;
                case 3:
                    toString+=" 11:30-1:00";
                    break;
                case 4:
                    toString+=" 1:00-2:20";
                    break;
                case 5:
                    toString+=" 2:20-3:40";
                    break;
                case 6:
                    toString+=" 3:40-5:00";
                    break;
                case 7:
                    toString+=" 5:10-6:30";
                case 8:
                    toString+=" 6:30-8:00";
                default:
            }
        return toString;
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                
                new Main().setVisible(true);
                
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton buton_generar;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem5;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JList list_alumnos;
    private javax.swing.JList list_clases;
    private javax.swing.JList list_maestros;
    private javax.swing.JList list_noabiertas;
    private javax.swing.JMenu menu1;
    private javax.swing.JMenuItem menuitem1;
    private javax.swing.JSpinner sp_aulas;
    private javax.swing.JTable table_aulas;
    private javax.swing.JTable table_maestros;
    // End of variables declaration//GEN-END:variables
    ArrayList<Clase> clases = new ArrayList();
    ArrayList<Maestro> maestros = new ArrayList();
    ArrayList<Alumno> alumnos = new ArrayList();
    ArrayList<Clase> clases_noabiertas = new ArrayList();
    
    public void showData(){
        //System.out.println("si");
        DefaultListModel listModel = (DefaultListModel)list_alumnos.getModel();
        listModel.removeAllElements();
        for(Alumno alumno:alumnos)
            listModel.addElement(alumno);
        list_alumnos.setCellRenderer(new MyListCellRenderer2());
        listModel = (DefaultListModel)list_clases.getModel();
        listModel.removeAllElements();
        for(Clase clase:clases)
            listModel.addElement(clase.toString());
        listModel = (DefaultListModel)list_maestros.getModel();
        listModel.removeAllElements();
        for(Maestro maestro:maestros)
            listModel.addElement(maestro);
        list_maestros.setCellRenderer(new MyListCellRenderer());
    }
}
